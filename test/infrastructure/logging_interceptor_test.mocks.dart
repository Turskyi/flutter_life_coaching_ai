// Mocks generated by Mockito 5.4.4 from annotations
// in lifecoach/test/infrastructure/logging_interceptor_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'package:dio/dio.dart' as _i3;
import 'package:lifecoach/infrastructure/ws/rest/interceptors/logging_interceptor.dart'
    as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [LoggingInterceptor].
///
/// See the documentation for Mockito's code generation for more information.
class MockLoggingInterceptor extends _i1.Mock
    implements _i2.LoggingInterceptor {
  MockLoggingInterceptor() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void onResponse(
    _i3.Response<dynamic>? response,
    _i3.ResponseInterceptorHandler? handler,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onResponse,
          [
            response,
            handler,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onError(
    _i3.DioException? err,
    _i3.ErrorInterceptorHandler? handler,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            err,
            handler,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onRequest(
    _i3.RequestOptions? options,
    _i3.RequestInterceptorHandler? handler,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onRequest,
          [
            options,
            handler,
          ],
        ),
        returnValueForMissingStub: null,
      );
}
